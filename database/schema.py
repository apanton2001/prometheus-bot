from sqlalchemy import Column, Integer, String, Float, DateTime, Boolean, ForeignKey, Text, JSON
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship
import datetime

Base = declarative_base()

class User(Base):
    """User account for dashboard access"""
    __tablename__ = "users"
    
    id = Column(Integer, primary_key=True)
    username = Column(String(50), unique=True, nullable=False)
    email = Column(String(100), unique=True, nullable=False)
    password_hash = Column(String(255), nullable=False)
    is_active = Column(Boolean, default=True)
    is_admin = Column(Boolean, default=False)
    created_at = Column(DateTime, default=datetime.datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.datetime.utcnow, onupdate=datetime.datetime.utcnow)
    
    # Relationships
    api_keys = relationship("ApiKey", back_populates="user")
    
    def __repr__(self):
        return f"<User(username='{self.username}', email='{self.email}')>"

class ApiKey(Base):
    """API keys for various services"""
    __tablename__ = "api_keys"
    
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey("users.id"))
    service = Column(String(50), nullable=False)
    api_key = Column(String(255), nullable=False)
    api_secret = Column(String(255), nullable=True)
    is_active = Column(Boolean, default=True)
    created_at = Column(DateTime, default=datetime.datetime.utcnow)
    
    # Relationships
    user = relationship("User", back_populates="api_keys")
    
    def __repr__(self):
        return f"<ApiKey(service='{self.service}', user_id={self.user_id})>"

class TradingPair(Base):
    """Trading pairs for trading bot"""
    __tablename__ = "trading_pairs"
    
    id = Column(Integer, primary_key=True)
    exchange = Column(String(50), nullable=False)
    base_currency = Column(String(10), nullable=False)
    quote_currency = Column(String(10), nullable=False)
    is_active = Column(Boolean, default=True)
    
    # Relationships
    trades = relationship("Trade", back_populates="pair")
    
    def __repr__(self):
        return f"<TradingPair(exchange='{self.exchange}', pair='{self.base_currency}/{self.quote_currency}')>"

class Trade(Base):
    """Individual trades executed by the trading bot"""
    __tablename__ = "trades"
    
    id = Column(Integer, primary_key=True)
    pair_id = Column(Integer, ForeignKey("trading_pairs.id"))
    strategy = Column(String(50), nullable=False)
    entry_price = Column(Float, nullable=False)
    exit_price = Column(Float, nullable=True)
    amount = Column(Float, nullable=False)
    entry_time = Column(DateTime, nullable=False)
    exit_time = Column(DateTime, nullable=True)
    profit_percentage = Column(Float, nullable=True)
    profit_absolute = Column(Float, nullable=True)
    status = Column(String(20), default="open")  # open, closed
    
    # Relationships
    pair = relationship("TradingPair", back_populates="trades")
    
    def __repr__(self):
        return f"<Trade(pair='{self.pair.base_currency}/{self.pair.quote_currency}', profit={self.profit_percentage})>"

class ContentItem(Base):
    """Content generated by the content bot"""
    __tablename__ = "content_items"
    
    id = Column(Integer, primary_key=True)
    title = Column(String(255), nullable=False)
    content_type = Column(String(50), nullable=False)  # blog, social, email, etc.
    content = Column(Text, nullable=False)
    platform = Column(String(50), nullable=True)  # twitter, blog, etc.
    status = Column(String(20), default="draft")  # draft, published, scheduled
    publication_date = Column(DateTime, nullable=True)
    created_at = Column(DateTime, default=datetime.datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.datetime.utcnow, onupdate=datetime.datetime.utcnow)
    metadata = Column(JSON, nullable=True)
    
    # Relationships
    analytics = relationship("ContentAnalytics", back_populates="content_item")
    
    def __repr__(self):
        return f"<ContentItem(title='{self.title}', type='{self.content_type}')>"

class ContentAnalytics(Base):
    """Analytics for content performance"""
    __tablename__ = "content_analytics"
    
    id = Column(Integer, primary_key=True)
    content_id = Column(Integer, ForeignKey("content_items.id"))
    views = Column(Integer, default=0)
    clicks = Column(Integer, default=0)
    conversions = Column(Integer, default=0)
    revenue = Column(Float, default=0)
    cost = Column(Float, default=0)
    last_updated = Column(DateTime, default=datetime.datetime.utcnow)
    
    # Relationships
    content_item = relationship("ContentItem", back_populates="analytics")
    
    def __repr__(self):
        return f"<ContentAnalytics(content_id={self.content_id}, views={self.views}, revenue=${self.revenue})>"

class ServiceCustomer(Base):
    """Customers for service automation"""
    __tablename__ = "service_customers"
    
    id = Column(Integer, primary_key=True)
    name = Column(String(100), nullable=False)
    email = Column(String(100), unique=True, nullable=False)
    status = Column(String(20), default="active")  # active, inactive
    created_at = Column(DateTime, default=datetime.datetime.utcnow)
    
    # Relationships
    services = relationship("ServiceDelivery", back_populates="customer")
    
    def __repr__(self):
        return f"<ServiceCustomer(name='{self.name}', email='{self.email}')>"

class ServiceDelivery(Base):
    """Service delivery records"""
    __tablename__ = "service_deliveries"
    
    id = Column(Integer, primary_key=True)
    customer_id = Column(Integer, ForeignKey("service_customers.id"))
    service_type = Column(String(50), nullable=False)
    status = Column(String(20), default="pending")  # pending, in_progress, completed, failed
    start_time = Column(DateTime, nullable=True)
    completion_time = Column(DateTime, nullable=True)
    revenue = Column(Float, nullable=False)
    cost = Column(Float, nullable=True)
    metadata = Column(JSON, nullable=True)
    
    # Relationships
    customer = relationship("ServiceCustomer", back_populates="services")
    
    def __repr__(self):
        return f"<ServiceDelivery(customer_id={self.customer_id}, service='{self.service_type}', status='{self.status}')>"

class RevenueTracking(Base):
    """Daily revenue tracking"""
    __tablename__ = "revenue_tracking"
    
    id = Column(Integer, primary_key=True)
    date = Column(DateTime, nullable=False)
    trading_revenue = Column(Float, default=0)
    content_revenue = Column(Float, default=0)
    service_revenue = Column(Float, default=0)
    total_revenue = Column(Float, default=0)
    total_cost = Column(Float, default=0)
    net_profit = Column(Float, default=0)
    
    def __repr__(self):
        return f"<RevenueTracking(date='{self.date}', total_revenue=${self.total_revenue}, net_profit=${self.net_profit})>"

# Create all tables
def init_db(engine):
    Base.metadata.create_all(engine) 